<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://elioth.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://elioth.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-25T20:53:27+00:00</updated><id>https://elioth.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with math</title><link href="https://elioth.github.io/blog/2025/math/" rel="alternate" type="text/html" title="a post with math"/><published>2025-08-24T15:12:00+00:00</published><updated>2025-08-24T15:12:00+00:00</updated><id>https://elioth.github.io/blog/2025/math</id><content type="html" xml:base="https://elioth.github.io/blog/2025/math/"><![CDATA[<p><small><em>Disclaimer: All information in this post is publicly available, either in the Independent Rikers Commission (a.k.a., Lippman Commission) <a href="https://static1.squarespace.com/static/5b6de4731aef1de914f43628/t/67dd7c6d4e5dca1fa86db6d8/1742568562268/Independent+Rikers+Commission+Blueprint+to+Close+Rikers+Island+March+2025.pdf">report</a> or in the <a href="https://www.vitalcitynyc.org/articles/the-citys-new-rikers-math">report</a> that I authored while working as Assistant Commissioner of Operations Research, that was made public through a Freedom of Information Act (FOIA) request made by the Nonprofit Vital City. Moreover, the contents of this post are only my opinions and do not represent the views of the city or any other entity I am or was affiliated with.</em> </small></p> <blockquote> <p>Operations research is a scientiﬁc method of providing executive departments with a quantitative basis for decisions regarding operations under their control.</p> </blockquote> <p>Out of all the definitions of Operations Research, this is the one I like most. It really comprises the quantitative spirit of the discipline while emphasizing that ultimately, the goal is problem solving. The quote is attributed to Philip M. Morse (the father or OR in the U.S.) in a John D. Little’s <a href="https://pubsonline.informs.org/doi/epdf/10.1287/opre.50.1.146.17799">article</a> commemorating the 50th anniversary of the Operations Research Journal.</p> <h2 id="some-background">Some Background</h2> <p>In this post, we talk about connecting one of Little’s key discoveries (his eponymous law) and a very relevant set of problems that are in great need of OR solutions. Out of these problems, Rikers Island has been infamously at the center of innumerable controversies and plagued with problems since its construction. The aim of this post is not to comment on the social and justice aspects of the NYC correctional system, but rather talk about a common set of challenges that stochastic systems (such as Rikers Island) face because of their scale, and some quantitative strategies to guide urban planning for either replace existing facilities or build new ones.</p> <p>As a motivation and context to this problem, Rikers is set to be closed by 2027 and replaced by different facilities in each borough. When this plan was set into law in 2019, the population of Rikers was in a steady decline, and it was then decided that 3,300 beds was enough capacity for the new facilities. Long-story short, a combination of factors including the pandemic, a different set of bail-laws and patterns of crime have set the population in the opposite direction. As part of my work I was tasked with creating projections of the population in the future in a data-driven way back in 2022-23. This post is a commentary on that analysis, which I believe has value beyond correctional facilities, and can be applied to many large scale stochastic systems (such as airports, traffic roads and so on).</p> <h2 id="the-forecast-challenge-and-the-connection-with-littles-law">The Forecast Challenge and the Connection with Little’s Law</h2> <p>Rikers (or any correctional facility) is a stochastic system where there is a series of arrivals that stay a random amount of time (in this case, pretrial cases) before exiting the system. Little’s law is the swiss knife of a scientist studying stochastic systems. The simplicity and beauty of the formula \(L=\lambda w\), expressing that the average number in the system \(L\) is equal to their arrival rate \(\lambda\) times the average waiting time \(w\) provides simple answer to in general a difficult question.</p> <p>While an incredibly useful relation, it doesn’t apply then the arrival rate is time-varying and not converging to an average value in the long-term. As part of the task of building a prediction model for the future population in the system, I went back to the proof of Little’s law to understand the mechanics on how to modify it to the time-varying case and making it transient. Here, transience refers to the ability to have forecasts per month into the future, this is important as the population and arrivals exhibit heavy seasonality.</p> <p>This study led to this modified version of Little’s law for time-varying arrival rates:</p> <blockquote> <h4 id="theorem-average-population-in-system-for-time-varying-arrival-rates-a-transient-littles-law">Theorem: Average Population in System for Time-varying Arrival Rates (a transient Little’s Law)</h4> <p>Consider a discrete time stochastic system with time indexed as \(t=0,1,2,\dots\) with arrivals given by arbitrary rates \(\lambda_1,\lambda_2\) where arrivals spend an average time $w$ in the system. The average number in the system \(L_t\) at time \(t\) is given by:</p> \[L_t = (1-e^{-1/w})\lambda_t w +e^{-1/w}L_{t-1}\] </blockquote> <p>The theorem states that the average number in the system is a combination of what’s implied by Little’s law \(\lambda_t w\) plus the number in the system the previous period that haven’t completed their time in the system. Remarkably this retrieves the original Little’s law in the case where $\lambda_1=\lambda_2=…$ and also in the case where \(w\rightarrow 0\) (meaning that the service is fast enough for the number in system to converge to the quantity implied by Little’s law before the rate changes). Lastly, in the case where the arrival rates converge, again Little’s law is retrieved.</p> <h2 id="predicting-the-population-at-rikers">Predicting the Population at Rikers</h2> <p>The previous theorem is useful in two ways: on one hand it provides a way to predict the future population by modeling the arrival rates (say, with a time-series model); on the other, and more importantly, it also provides a model that can quantify how changes in policy (recall that the average time in the system \(w\) is determined by the time the case takes to process) change the average number in population. This is specially useful to quantify how speeding up the court system can do to reduce or change the population at Rikers, the kind of analysis that while hinted intuitively in the Lippman report, is lacking a quantitative basis.</p> <p>Using this model, we forecasted the arrival rates as a time series model \(\hat\lambda_t = f(\lambda_{t_1})\) and used the result in our Theorem. This exercise produced the following results:</p> <pre><code class="language-chartjs">{
  "type": "line",
  "data": {
    "labels": [
      "2023-02",
      "2023-03",
      "2023-04",
      "2023-05",
      "2023-06",
      "2023-07",
      "2023-08",
      "2023-09",
      "2023-10",
      "2023-11",
      "2023-12",
      "2024-01",
      "2024-02",
      "2024-03",
      "2024-04",
      "2024-05",
      "2024-06",
      "2024-07",
      "2024-08",
      "2024-09",
      "2024-10",
      "2024-11",
      "2024-12",
      "2025-01",
      "2025-02",
      "2025-03",
      "2025-04",
      "2025-05",
      "2025-06"
    ],
    "datasets": [
      {
        "label": "Expected Population",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          5829.94,
          5866.9,
          5708.24,
          5844.03,
          5888.77,
          6071.46,
          6218.77,
          6432.59,
          6613.27,
          6531.51,
          6378.37,
          6480.73,
          6500.96,
          6601.87,
          6494.85,
          6672.93,
          6752.78,
          6965.04,
          7137.57,
          7373.15,
          7572.79,
          7507.74,
          7369.42,
          7485.02,
          7517.15,
          7628.8,
          7531.52,
          7718.45,
          7806.38
        ],
        "spanGaps": false
      },
      {
        "label": "Actual Population",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(255,99,132,0.4)",
        "borderColor": "rgba(255,99,132,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(255,99,132,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(255,99,132,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          5921,
          5911,
          5943,
          6018,
          6044,
          6152,
          6181,
          6179,
          6171,
          6148,
          6072,
          6109,
          6151,
          6285,
          6324,
          6315,
          6376,
          6386,
          6440,
          6512,
          6573,
          6626,
          6605,
          6603,
          6760,
          6982,
          7264,
          7517,
          7611
        ],
        "spanGaps": false
      },
      {
        "label": "C.I. Lower",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(54,162,235,0.4)",
        "borderColor": "rgba(54,162,235,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(54,162,235,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(54,162,235,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          5500.52,
          5367.83,
          5081.43,
          5116.54,
          5081.53,
          5199.87,
          5295.09,
          5466.24,
          5611.88,
          5501.66,
          5325.06,
          5407.49,
          5411.21,
          5498.15,
          5379.76,
          5547.81,
          5619.36,
          5824.38,
          5990.81,
          6221.11,
          6416.29,
          6347.85,
          6206.81,
          6319.72,
          6349.69,
          6459.37,
          6360.74,
          6546.08,
          6632.77
        ],
        "spanGaps": false
      },
      {
        "label": "C.I. Upper",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(255,206,86,0.4)",
        "borderColor": "rgba(255,206,86,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(255,206,86,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(255,206,86,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          6159.36,
          6365.96,
          6335.05,
          6571.53,
          6696.01,
          6943.04,
          7142.45,
          7398.95,
          7614.65,
          7561.36,
          7431.67,
          7553.96,
          7590.72,
          7705.59,
          7609.95,
          7798.05,
          7886.21,
          8105.7,
          8284.32,
          8525.19,
          8729.3,
          8667.62,
          8532.02,
          8650.31,
          8684.62,
          8798.24,
          8702.31,
          8890.83,
          8979.98
        ],
        "spanGaps": false
      }
    ]
  },
   "options": {
    "scales": {
      "y": {
        "min": 4827.0,
        "max": 9429.0
      }
    }
  }
}
</code></pre> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://elioth.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://elioth.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://elioth.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://elioth.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://elioth.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://elioth.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>